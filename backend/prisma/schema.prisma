generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Household {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  householdNumber Int              @unique @map("household_number")
  ownerName       String           @map("owner_name") @db.VarChar(255)
  email           String?          @unique @db.VarChar(255)
  phone           String?          @db.VarChar(20)
  address         String?          @db.VarChar(255)
  isActive        Boolean          @default(true) @map("is_active")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at")
  householdMeters HouseholdMeter[]
  monthlyBills    MonthlyBill[]
  quarterlyBills  QuarterlyBill[]
  users           User[]
  utilityBilling  UtilityBilling[]

  @@map("households")
}

model UtilityService {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                  @unique @db.VarChar(100)
  description            String?                 @db.VarChar(500)
  unit                   String                  @db.VarChar(20)
  unitPrice              Decimal                 @default(0.00) @map("unit_price") @db.Decimal(10, 2)
  serviceType            ServiceType             @default(OTHER) @map("service_type")
  isActive               Boolean                 @default(true) @map("is_active")
  isMandatory            Boolean                 @default(false) @map("is_mandatory")
  billingFrequency       BillingFrequency        @default(QUARTERLY) @map("billing_frequency")
  hasMainMeters          Boolean                 @default(false) @map("has_main_meters")
  mainMeterCount         Int                     @default(0) @map("main_meter_count")
  readingFrequency       Int                     @default(3) @map("reading_frequency")
  requiresReconciliation Boolean                 @default(false) @map("requires_reconciliation")
  createdAt              DateTime                @default(now()) @map("created_at")
  householdMeters        HouseholdMeter[]
  mainMeters             MainMeter[]
  utilityBilling         UtilityBilling[]
  pricing                UtilityPricing[]
  reconciliations        UtilityReconciliation[]

  @@map("utility_services")
}

model MainMeter {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId        String             @map("service_id") @db.Uuid
  meterIdentifier  String             @unique @map("meter_identifier") @db.VarChar(100)
  meterSerial      String?            @map("meter_serial") @db.VarChar(100)
  installationDate DateTime?          @map("installation_date") @db.Date
  isActive         Boolean            @default(true) @map("is_active")
  createdAt        DateTime           @default(now()) @map("created_at")
  readings         MainMeterReading[]
  service          UtilityService     @relation(fields: [serviceId], references: [id])

  @@map("main_meters")
}

model MainMeterReading {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  meterId         String        @map("meter_id") @db.Uuid
  billingPeriodId String        @map("billing_period_id") @db.Uuid
  meterReading    Decimal       @map("meter_reading") @db.Decimal(12, 3)
  readingDate     DateTime      @map("reading_date") @db.Date
  consumption     Decimal?      @db.Decimal(12, 3)
  notes           String?
  createdAt       DateTime      @default(now()) @map("created_at")
  billingPeriod   BillingPeriod @relation(fields: [billingPeriodId], references: [id])
  meter           MainMeter     @relation(fields: [meterId], references: [id])

  @@map("main_meter_readings")
}

model HouseholdMeter {
  id               String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  householdId      String                  @map("household_id") @db.Uuid
  serviceId        String                  @map("service_id") @db.Uuid
  meterSerial      String?                 @map("meter_serial") @db.VarChar(100)
  installationDate DateTime?               @map("installation_date") @db.Date
  isActive         Boolean                 @default(true) @map("is_active")
  createdAt        DateTime                @default(now()) @map("created_at")
  readings         HouseholdMeterReading[]
  household        Household               @relation(fields: [householdId], references: [id])
  service          UtilityService          @relation(fields: [serviceId], references: [id])

  @@unique([householdId, serviceId])
  @@map("household_meters")
}

model HouseholdMeterReading {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  householdMeterId String         @map("household_meter_id") @db.Uuid
  billingPeriodId  String         @map("billing_period_id") @db.Uuid
  meterReading     Decimal        @map("meter_reading") @db.Decimal(12, 3)
  readingDate      DateTime       @map("reading_date") @db.Date
  rawConsumption   Decimal?       @map("raw_consumption") @db.Decimal(12, 3)
  notes            String?
  createdAt        DateTime       @default(now()) @map("created_at")
  billingPeriod    BillingPeriod  @relation(fields: [billingPeriodId], references: [id])
  householdMeter   HouseholdMeter @relation(fields: [householdMeterId], references: [id])

  @@map("household_meter_readings")
}

model BillingPeriod {
  id                      String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  periodName              String                  @unique @map("period_name") @db.VarChar(20)
  periodType              PeriodType              @map("period_type")
  startDate               DateTime                @map("start_date") @db.Date
  endDate                 DateTime                @map("end_date") @db.Date
  isOfficialBilling       Boolean                 @default(false) @map("is_official_billing")
  isBillingEnabled        Boolean                 @default(false) @map("is_billing_enabled")
  isReconciliationEnabled Boolean                 @default(false) @map("is_reconciliation_enabled")
  readingDeadline         DateTime                @map("reading_deadline") @db.Date
  billingDeadline         DateTime?               @map("billing_deadline") @db.Date
  createdAt               DateTime                @default(now()) @map("created_at")
  householdMeterReadings  HouseholdMeterReading[]
  mainMeterReadings       MainMeterReading[]
  monthlyBills            MonthlyBill[]
  quarterlyBills          QuarterlyBill[]
  utilityBilling          UtilityBilling[]
  reconciliations         UtilityReconciliation[]

  @@unique([periodName, periodType])
  @@map("billing_periods")
}

model UtilityReconciliation {
  id                     String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId              String           @map("service_id") @db.Uuid
  billingPeriodId        String           @map("billing_period_id") @db.Uuid
  mainMeterTotal         Decimal          @map("main_meter_total") @db.Decimal(12, 3)
  householdTotal         Decimal          @map("household_total") @db.Decimal(12, 3)
  difference             Decimal          @db.Decimal(12, 3)
  adjustmentPerHousehold Decimal          @map("adjustment_per_household") @db.Decimal(10, 3)
  reconciliationDate     DateTime         @map("reconciliation_date") @db.Date
  notes                  String?
  createdAt              DateTime         @default(now()) @map("created_at")
  utilityBilling         UtilityBilling[]
  billingPeriod          BillingPeriod    @relation(fields: [billingPeriodId], references: [id])
  service                UtilityService   @relation(fields: [serviceId], references: [id])

  @@map("utility_reconciliation")
}

model UtilityPricing {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceId            String         @map("service_id") @db.Uuid
  effectiveDate        DateTime       @map("effective_date") @db.Date
  pricePerUnit         Decimal        @map("price_per_unit") @db.Decimal(8, 4)
  fixedFeeTotal        Decimal        @default(0) @map("fixed_fee_total") @db.Decimal(10, 2)
  fixedFeePerHousehold Decimal        @default(0) @map("fixed_fee_per_household") @db.Decimal(8, 2)
  isActive             Boolean        @default(true) @map("is_active")
  notes                String?
  createdAt            DateTime       @default(now()) @map("created_at")
  service              UtilityService @relation(fields: [serviceId], references: [id])

  @@unique([serviceId, effectiveDate])
  @@map("utility_pricing")
}

model UtilityBilling {
  id                       String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  householdId              String                 @map("household_id") @db.Uuid
  serviceId                String                 @map("service_id") @db.Uuid
  reconciliationId         String?                @map("reconciliation_id") @db.Uuid
  billingPeriodId          String                 @map("billing_period_id") @db.Uuid
  rawConsumption           Decimal                @map("raw_consumption") @db.Decimal(12, 3)
  reconciliationAdjustment Decimal                @default(0) @map("reconciliation_adjustment") @db.Decimal(10, 3)
  adjustedConsumption      Decimal                @map("adjusted_consumption") @db.Decimal(12, 3)
  costPerUnit              Decimal                @map("cost_per_unit") @db.Decimal(8, 4)
  consumptionCost          Decimal                @map("consumption_cost") @db.Decimal(10, 2)
  fixedFeeShare            Decimal                @map("fixed_fee_share") @db.Decimal(8, 2)
  totalUtilityCost         Decimal                @map("total_utility_cost") @db.Decimal(10, 2)
  createdAt                DateTime               @default(now()) @map("created_at")
  billingPeriod            BillingPeriod          @relation(fields: [billingPeriodId], references: [id])
  household                Household              @relation(fields: [householdId], references: [id])
  reconciliation           UtilityReconciliation? @relation(fields: [reconciliationId], references: [id])
  service                  UtilityService         @relation(fields: [serviceId], references: [id])

  @@map("utility_billing")
}

model QuarterlyBill {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  householdId       String        @map("household_id") @db.Uuid
  billingPeriodId   String        @map("billing_period_id") @db.Uuid
  memberFee         Decimal       @default(1000.00) @map("member_fee") @db.Decimal(8, 2)
  totalUtilityCosts Decimal       @map("total_utility_costs") @db.Decimal(10, 2)
  sharedCosts       Decimal       @map("shared_costs") @db.Decimal(8, 2)
  totalAmount       Decimal       @map("total_amount") @db.Decimal(10, 2)
  dueDate           DateTime      @map("due_date") @db.Date
  status            BillStatus    @default(pending)
  createdAt         DateTime      @default(now()) @map("created_at")
  payments          Payment[]
  billingPeriod     BillingPeriod @relation(fields: [billingPeriodId], references: [id])
  household         Household     @relation(fields: [householdId], references: [id])

  @@map("quarterly_bills")
}

model MonthlyBill {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  householdId       String        @map("household_id") @db.Uuid
  billingPeriodId   String        @map("billing_period_id") @db.Uuid
  totalUtilityCosts Decimal       @map("total_utility_costs") @db.Decimal(10, 2)
  totalAmount       Decimal       @map("total_amount") @db.Decimal(10, 2)
  dueDate           DateTime      @map("due_date") @db.Date
  status            BillStatus    @default(pending)
  createdAt         DateTime      @default(now()) @map("created_at")
  billingPeriod     BillingPeriod @relation(fields: [billingPeriodId], references: [id])
  household         Household     @relation(fields: [householdId], references: [id])
  payments          Payment[]

  @@map("monthly_bills")
}

model Payment {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quarterlyBillId String?        @map("quarterly_bill_id") @db.Uuid
  monthlyBillId   String?        @map("monthly_bill_id") @db.Uuid
  amount          Decimal        @db.Decimal(8, 2)
  paymentDate     DateTime       @map("payment_date") @db.Date
  paymentMethod   String?        @map("payment_method") @db.VarChar(50)
  referenceNumber String?        @map("reference_number") @db.VarChar(100)
  createdAt       DateTime       @default(now()) @map("created_at")
  monthlyBill     MonthlyBill?   @relation(fields: [monthlyBillId], references: [id])
  quarterlyBill   QuarterlyBill? @relation(fields: [quarterlyBillId], references: [id])

  @@map("payments")
}

model SharedCost {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  year             Int
  quarter          Int?
  description      String   @db.VarChar(255)
  totalAmount      Decimal  @map("total_amount") @db.Decimal(10, 2)
  costPerHousehold Decimal  @map("cost_per_household") @db.Decimal(8, 2)
  category         String?  @db.VarChar(100)
  createdAt        DateTime @default(now()) @map("created_at")

  @@unique([year, quarter, description])
  @@map("shared_costs")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  firstName     String         @map("first_name") @db.VarChar(100)
  lastName      String         @map("last_name") @db.VarChar(100)
  role          UserRole       @default(MEMBER)
  isActive      Boolean        @default(true) @map("is_active")
  lastLogin     DateTime?      @map("last_login")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")
  householdId   String?        @map("household_id") @db.Uuid
  refreshTokens RefreshToken[]
  household     Household?     @relation(fields: [householdId], references: [id])

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique
  userId    String   @map("user_id") @db.Uuid
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

enum PeriodType {
  quarterly
  monthly

  @@map("period_type")
}

enum BillStatus {
  pending
  paid
  overdue

  @@map("bill_status")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum ServiceType {
  WATER
  ELECTRICITY
  HEATING
  INTERNET
  OTHER
}

enum BillingFrequency {
  MONTHLY
  QUARTERLY
  ANNUALLY
}
